slip6_1

#include<stdio.h>

struct node
{
  	int pno,reftime;
}frames[100];

int n,i;

void init()
{
	for(i=0;i<n;i++)
   	{ 
	   	frames[i].pno = -1;
	 	frames[i].reftime = -1;
   	}
}

int page_found(int pno)
{
	for(i=0;i<n;i++)
	{
		if(frames[i].pno==pno)
		{
			return i;
		}
	}
	
	return -1;
}

int get_free_frame()
{  
	for (i=0; i<=n; i++)
  	{
		if (frames[i].pno==-1)
		{
			return(i);
		}
	}
   	
	return(-1);
}

int get_mru_frame()
{
  	int selfno=0;

  	for(i=0;i<n;i++)
  	{
  		if(frames[i].reftime > frames[selfno].reftime)
  		{
			selfno=i;
		}
	}

  	return selfno;
}

int main()
{
   	int pg_req[]={5,8,10,14,10,9,5,10,8,5,1,10,9,12,10};
   	int size=15,currtime=0;
   	int page_fault=0,i,j,fno;
  
   	printf("\n Enter No. of Frames : ");
	scanf("%d",&n);
   
   	init();

   	printf("\n PageNo     Page Frames          Page Fault");
   	printf("\n--------------------------------------------");
   
   	for(i=0;i<size;i++)
   	{
   		fno = page_found(pg_req[i]);
   		
	 	if(fno==-1) 
	 	{
	   		fno=get_free_frame();
	   		
			if (fno==-1) 
			{
				fno=get_mru_frame();
			}
	   		
			page_fault++;
		   
		   	frames[fno].pno=pg_req[i];
		   	frames[fno].reftime=currtime;
		   
		   	printf("\n %d",pg_req[i]);
		   	
			for(j=0;j<n;j++)
			{
				printf("\t %d",frames[j].pno);
			}
		   	
			printf(" : Y");
	 	}
		else
		{
			frames[fno].pno=pg_req[i];
		   	frames[fno].reftime=currtime;
		   	
			printf("\n %d",pg_req[i]);
		   	
		   	for(j=0;j<n;j++)
			{
			 	printf("\t %d",frames[j].pno);
			}
		   	printf(" : N");
		}
		
	   	currtime++;
   	}
   	
  	printf("\n-------------------------------------------");
	printf("\n Total Page Faults are = %d",page_fault);
	printf("\n-------------------------------------------");
	
	return 0;
}


slip6_2

#include<stdio.h>
#include<string.h>
#include<stdlib.h>

char comm[80],*args[5];

void get_comm()
{
	int len;
	
	fgets(comm,80,stdin);
	len = strlen(comm);
	comm[len-1] = '\0';
}

void sep_args()
{
	int i,j=0,t=0;
	
	args[t] = (char*) malloc(sizeof(char)*20);
	
	for(i=0;comm[i]!='\0';i++)
	{
		if(comm[i]==' ')
		{
			args[t][j]='\0';
			t++;
			j=0;
			args[t] = (char*) malloc(sizeof(char)*20);
		}
		else
		{
			args[t][j] = comm[i];
			j++;
		}
	}
	args[t][j]='\0';
}

void search(char op, char fname[])
{
	char buff[100],*ptr,*pattern="include";
	int cnt;
	FILE *fp;
	int i;

	fp= fopen(fname,"r");
	if( fp == NULL )
	{
		printf("\n Unable to open file");
		return;
	}
	
	if(op=='a')
	{
		while (!feof(fp))
		{
			buff[0] = '\0';
			fgets(buff,80,fp);
			ptr = strstr(buff,pattern);
			if( ptr != NULL )
				printf("%s",buff);
		}
		fclose(fp);
	}
	else if(op=='c')
	{
		cnt=0;
		while (!feof(fp))
		{
			buff[0] = '\0';
			fgets(buff,80,fp);
			ptr = strstr(buff,pattern);
			if( ptr != NULL )
				cnt++;
		}
		fclose(fp);
		
		printf("\nThe serach string %s occurs %d times",pattern,cnt);
	}
	else if(op=='f')
	{
		while (!feof(fp))
		{
			buff[0] = '\0';
			fgets(buff,80,fp);
			ptr = strstr(buff,pattern);
			if( ptr != NULL )
			{
				printf("%s",buff);
				break;
			}
		}
		fclose(fp);
	}
	else
	{
		printf("\n Invalid Option");
	} 
}

void take_action()
{
	if(strcmp(args[0],"search")==0)
	{
		search(args[1][0],args[2]);
	}
	else if(strcmp(args[0],"quit")==0)
	{
		exit(0);
	}
	else
	{
		printf("\n %s: Command not found",args[0]);
	}
}

int main()
{
	while(1)
	{
		printf("\n myshell$ ");
		get_comm();
		sep_args();
		take_action();
	}

	return 0;
}

