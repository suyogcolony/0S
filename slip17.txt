slip17_1

#include<stdio.h>

struct node
{
  	int pno;
}frames[100];

int n,i;

void init()
{
	for(i=0;i<n;i++)
   	{ 
	   	frames[i].pno = -1;
   	}
}

int page_found(int pno)
{
	for(i=0;i<n;i++)
	{
		if(frames[i].pno==pno)
		{
			return i;
		}
	}
	
	return -1;
}

int get_free_frame()
{  
	for (i=0; i<=n; i++)
  	{
		if (frames[i].pno==-1)
		{
			return(i);
		}
	}
   	
	return(-1);
}

int get_optimal_frame(int p_request[],int cur,int size)
{
  	int fno,i,max=0;
  	int selfno=0,flag;
	  
  	for (fno=0; fno<n; fno++)
  	{
  		flag=0;
  		for(i=cur+1;i<size;i++)
  		{
  			if(frames[fno].pno==p_request[i])
  			{
  				if(max<i)
  				{
  					max=i;
					selfno=fno;		
				}
				flag=1;
				break;
			}
		}
		if(flag==0)
		{
			selfno=fno;
			break;
		}
	}
	
  	return selfno;
}

int main()
{
   	int pg_req[]={5,8,10,14,10,9,5,10,8,5,1,10,9,12,10};
   	int size=15,page_fault=0,i,j,fno;
  
   	printf("\n Enter No. of Frames : ");
	scanf("%d",&n);
   
   	init();

   	printf("\n PageNo     Page Frames          Page Fault");
   	printf("\n--------------------------------------------");
   
   	for(i=0;i<size;i++)
   	{
   		fno = page_found(pg_req[i]);
   		
	 	if(fno==-1) 
	 	{
	   		fno=get_free_frame();
	   		
			if (fno==-1) 
			{
				fno=get_optimal_frame(pg_req,i,size);
			}
	   		
			page_fault++;
		   
		   	frames[fno].pno=pg_req[i];
		   
		   	printf("\n %d",pg_req[i]);
		   	
			for(j=0;j<n;j++)
			{
				printf("\t %d",frames[j].pno);
			}
		   	
			printf(" : Y");
	 	}
		else
		{
			frames[fno].pno=pg_req[i];
		   	
			printf("\n %d",pg_req[i]);
		   	
		   	for(j=0;j<n;j++)
			{
			 	printf("\t %d",frames[j].pno);
			}
		   	printf(" : N");
		}
   	}
   	
  	printf("\n-------------------------------------------");
	printf("\n Total Page Faults are = %d",page_fault);
	printf("\n-------------------------------------------");
	
	return 0;
}


slip17_2

#include <stdio.h>
#include <stdlib.h>

struct proc_info
{
  int cpub;
  int atime;
  int flag;
} proc[20];

struct rqnode
 { int pid;
   struct rqnode *link;
 } *first=NULL, *curr, *prev, *last;

struct ganttchart
{
  int stime;
  int pid;
  int etime;
} gchart[20];

int i,n,ctime,gi=0,wtime[20]={0},ttime[20]={0};

void getprocs();
void start();
void addprocq();
void attachtoq(int);
void addgchart(int);
void dispgchart();
void calc_times();
void disptimes();
int finished();
int getfirstproc();
int getetime(int pid);


 main()
{ 

  getprocs();
  ctime=0; 
  start();
  dispgchart();
  disptimes();
}

void getprocs()
{ printf("\nHow many processes: "); scanf("%d",&n);
  printf("\nPID\tCPUB\tA.TIME\n");
  for (i=1; i<=n; i++)
  { printf("%d\t",i);
    scanf("%d%d",&proc[i].cpub,&proc[i].atime);
    proc[i].flag=0;
   }

}

void start()
{ int pid;
  addprocq(); //add procs in rq arrived at ctime
  pid=getfirstproc();//get FCFS process
  while(!finished()) //while not finished all processes
  {
   if(pid!=-1)
   {
    //execute process pid
    addgchart(pid);
    ctime++;  //increment current time
    proc[pid].cpub--;
    if(proc[pid].cpub==0)//proc finished
    {
     //find turn around time
     ttime[pid]+=(ctime-proc[pid].atime);
         pid=getfirstproc();//get FCFS process
    }//if*/
   }//if
   else
   {
    ctime++;//no process in rq
    pid=getfirstproc();//get FCFS process
   }
   addprocq(); //add procs in rq arrived at ctime
  }//while
  gchart[gi].etime=ctime;
}//start

void addprocq()
{
  for(i=1;i<=n;i++)
  { if(proc[i].atime==ctime)
      attachtoq(i);
   }//for
}//addprocq

void attachtoq(int pid)
{
 curr=(struct rqnode *)malloc(sizeof(struct rqnode));
 curr->pid=pid;curr->link=NULL;
 if(first==NULL)
   first=curr;
 else
   last->link=curr;
 last=curr;
}

int finished() //check all proc finished cpub
{
  for(i=1;i<=n;i++)
  { if(proc[i].cpub!=0)
     return(0);
  }
  return(1);
}


int getfirstproc()
{
  int pid;
  if(first==NULL)
    return(-1);
  pid=first->pid;
  curr=first; //remove from rq
  first=first->link;
  free(curr);
  return(pid);

}//getfirstproc


void addgchart(int pid)
{static int ppid=-1;
 if(ppid!=pid)
 {
  gchart[++gi].pid=pid;
  gchart[gi].stime=ctime;
  gchart[gi-1].etime=gchart[gi].stime;
  //find waiting time of pid
  wtime[pid]+=(ctime-getetime(pid));
  ppid=pid;
 }
}

void dispgchart()
{ printf("\n");
  for(i=1;i<=gi;i++)
    printf("|----");
  printf("|\n");

  for(i=1;i<=gi;i++)
    printf("| %d  ",gchart[i].pid);
  printf("|\n");

  for(i=1;i<=gi;i++)
    printf("|----");
  printf("|\n");

  for(i=1;i<=gi;i++)
   printf("%d    ",gchart[i].stime);
  printf("%d\n",gchart[gi].etime);
  //getch();

}

int getetime(int pid)
{
  for(i=gi-1;i>=1;i--)
   if(gchart[i].pid==pid)
      return(gchart[i].etime);
  return(proc[pid].atime);

}

void disptimes()
{ int sumwt=0,sumtt=0,pid;


  printf("\n**Waiting Time**");
  printf("\nPID\tWtime");
  for(i=1;i<=n;i++)
  {
    printf("\n%d\t%d",i,wtime[i]);
    sumwt+=wtime[i];
  }
  printf("\nAverage:%.2f",(float)sumwt/n);

  printf("\n**Turnaround Time**");
  printf("\nPID\t ttime");
  for(i=1;i<=n;i++)
  {
    printf("\n%d\t%d",i,ttime[i]);
    sumtt+=ttime[i];
  }
  printf("\nAverage:%.2f",(float)sumtt/n);

  //getch();
}

